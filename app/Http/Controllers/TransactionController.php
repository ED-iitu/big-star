<?php
namespace App\Http\Controllers;
use App\CheckPayment;
use App\Pocket;
use App\Transaction;
use App\UserPocket;
use App\Wallet;
use Illuminate\Http\Request;
use TCG\Voyager\Http\Controllers\VoyagerBaseController;

class TransactionController extends VoyagerBaseController
{
    public function update(Request $request, $id)
    {
        if ($request->status == CheckPayment::STATUS_SUCCESS) {
            $data       =  [
                'message'    => "Ошибка при обновлении записи",
                'alert-type' => 'error',
            ];

            $fee    = 10; // налог 10%
            $pocket = Pocket::where('id', $request->pocket_id)->first();
            $user   = \App\User::where('id', $request->user_id)->first();

            if (!$pocket instanceof Pocket) {
                return redirect()->back()->with($data);
            }

            // Обновялем транзакцию
            $transaction = Transaction::where('user_id', $user->id)->where('pocket_id', $request->pocket_id)->where('status', Transaction::STATUS_CREATED)->first();
            $data = [
                'status' => Transaction::STATUS_SUCCESS,
            ];

            $transaction->update($data);

            // Добавляем пакет к пользователю
            $userPocket            = new UserPocket();
            $userPocket->user_id   = $user->id;
            $userPocket->pocket_id = $request->pocket_id;
            $userPocket->save();

            // Пополняем кошелек пользователя, который пригласил
            $actualNeededPrice    = $pocket->price * ($fee / 100);
            $needPrice            = $actualNeededPrice - ($actualNeededPrice * ($fee / 100));
            $registeredFromWallet = Wallet::where('user_id', $request->registered_from)->first();

            $registeredFromWallet->amount += $needPrice;
            $registeredFromWallet->save();

            // Записываем транзакцию о начисление
            $transaction              = new Transaction();
            $transaction->user_id     = $request->registered_from;
            $transaction->type        = Transaction::TYPE_REGISTERED;
            $transaction->status      = Transaction::STATUS_SUCCESS;
            $transaction->sum         = $needPrice;
            $transaction->description = "Оплата за приглашения пользователя: " . $user->name;

            $transaction->save();

            // Пополняем кошелек презентера, который пригласил
            $actualNeededPrice   = $pocket->price * (5 / 100);
            $needPrice           = $actualNeededPrice - ($actualNeededPrice * ($fee / 100));
            $presenterUserWallet = Wallet::where('user_id', $request->presenter)->first();

            $presenterUserWallet->amount += $needPrice;
            $presenterUserWallet->save();

            // Записываем транзакцию о начисление
            $transaction          = new Transaction();
            $transaction->user_id = $request->presenter;
            $transaction->type    = Transaction::TYPE_REGISTERED;
            $transaction->status  = Transaction::STATUS_SUCCESS;
            $transaction->sum     = $needPrice;
            $transaction->description = 'Оплата за покупку пакета пользователем: ' . $user->name;

            $transaction->save();
        }

        return parent::update($request, $id); // TODO: Change the autogenerated stub
    }
}
